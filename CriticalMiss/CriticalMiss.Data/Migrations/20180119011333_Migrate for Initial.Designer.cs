// <auto-generated />
using CriticalMiss.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CriticalMiss.Data.Migrations
{
    [DbContext(typeof(CriticalMissDbContext))]
    [Migration("20180119011333_Migrate for Initial")]
    partial class MigrateforInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CriticalMiss.Data.GameBoardDBO", b =>
                {
                    b.Property<int>("GameBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("BoardId");

                    b.Property<string>("BoardName");

                    b.Property<int>("GameId")
                        .HasColumnName("GameId");

                    b.Property<int>("Height")
                        .HasColumnName("Height");

                    b.Property<int>("ItemCount");

                    b.Property<int>("LocalId");

                    b.Property<int>("Pixel");

                    b.Property<int>("Width")
                        .HasColumnName("Width");

                    b.HasKey("GameBoardId");

                    b.ToTable("GameBoard","CM");
                });

            modelBuilder.Entity("CriticalMiss.Data.GameBoardItemDBO", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("GameBoardId")
                        .HasColumnName("GameBoardId");

                    b.Property<int>("Height")
                        .HasColumnName("PixelHeight");

                    b.Property<int>("ImageAssetId")
                        .HasColumnName("ImageAssetId");

                    b.Property<bool>("IsToken")
                        .HasColumnName("IsToken");

                    b.Property<int>("LocalId")
                        .HasColumnName("LocalId");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<int>("Width")
                        .HasColumnName("PixelWidth");

                    b.Property<int>("XPos")
                        .HasColumnName("XPosition");

                    b.Property<int>("YPos")
                        .HasColumnName("YPosition");

                    b.HasKey("ItemId");

                    b.HasIndex("GameBoardId");

                    b.HasIndex("ImageAssetId");

                    b.ToTable("GameBoardItem","CM");
                });

            modelBuilder.Entity("CriticalMiss.Data.ImageAssetDBO", b =>
                {
                    b.Property<int>("ImageAssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("AssetDescription")
                        .HasColumnName("Description");

                    b.Property<string>("AssetURI")
                        .IsRequired()
                        .HasColumnName("AssetURI");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnName("DateTimeCreated");

                    b.HasKey("ImageAssetId");

                    b.ToTable("ImageAsset","CM");
                });

            modelBuilder.Entity("CriticalMiss.Data.Models.Boards", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("BoardName")
                        .HasColumnName("BoardName");

                    b.Property<int>("GameId")
                        .HasColumnName("GameId");

                    b.Property<int>("Height")
                        .HasColumnName("Height");

                    b.Property<int>("ItemCount")
                        .HasColumnName("ItemCount");

                    b.Property<int>("LocalId")
                        .HasColumnName("LocalId");

                    b.Property<int>("Pixel")
                        .HasColumnName("Pixel");

                    b.Property<int>("Width")
                        .HasColumnName("Width");

                    b.HasKey("BoardId");

                    b.ToTable("GameBoard");
                });

            modelBuilder.Entity("CriticalMiss.Data.Models.Games", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GameId");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnName("GameName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password");

                    b.HasKey("GameId");

                    b.ToTable("Games","CM");
                });

            modelBuilder.Entity("CriticalMiss.Data.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("GameBoardId")
                        .HasColumnName("GameBoardId");

                    b.Property<int>("Height")
                        .HasColumnName("PixelHeight");

                    b.Property<int>("ImageAssetId")
                        .HasColumnName("ImageAssetId");

                    b.Property<bool>("IsToken")
                        .HasColumnName("IsToken");

                    b.Property<int>("LocalId")
                        .HasColumnName("LocalId");

                    b.Property<string>("Name")
                        .HasColumnName("Name");

                    b.Property<int>("Width")
                        .HasColumnName("PixelWidth");

                    b.Property<int>("XPos")
                        .HasColumnName("XPosition");

                    b.Property<int>("YPos")
                        .HasColumnName("YPosition");

                    b.HasKey("ItemId");

                    b.HasIndex("GameBoardId");

                    b.HasIndex("ImageAssetId");

                    b.ToTable("item");
                });

            modelBuilder.Entity("CriticalMiss.Data.GameBoardItemDBO", b =>
                {
                    b.HasOne("CriticalMiss.Data.GameBoardDBO", "GameBoard")
                        .WithMany("BoardItems")
                        .HasForeignKey("GameBoardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CriticalMiss.Data.ImageAssetDBO", "ImageAsset")
                        .WithMany()
                        .HasForeignKey("ImageAssetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CriticalMiss.Data.Models.Item", b =>
                {
                    b.HasOne("CriticalMiss.Data.GameBoardDBO", "GameBoard")
                        .WithMany()
                        .HasForeignKey("GameBoardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CriticalMiss.Data.ImageAssetDBO", "ImageAsset")
                        .WithMany()
                        .HasForeignKey("ImageAssetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
